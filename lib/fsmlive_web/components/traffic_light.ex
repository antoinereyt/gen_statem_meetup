defmodule FsmliveWeb.Components.TrafficLight do
  use Phoenix.Component

  attr :color, :string, values: ["red", "orange", "green"], required: true

  def car(assigns) do
    ~H"""
    <svg
      xml:space="preserve"
      viewBox="0 0 100 100"
      y="0"
      x="0"
      xmlns="http://www.w3.org/2000/svg"
      id="tf_car_1"
      version="1.1"
      width="128px"
      height="128px"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      style="width:100%;height:100%"
      aastyle="width:100%;height:100%;background-size:initial;background-repeat-y:initial;background-repeat-x:initial;background-position-y:initial;background-position-x:initial;background-origin:initial;background-image:initial;background-color:rgb(255, 255, 255);background-clip:initial;background-attachment:initial;"
    >
      <g class="ldl-scale" style="transform-origin:50% 50%;transform:rotate(0deg) scale(0.8, 0.8);">
        <path
          stroke-miterlimit="10"
          stroke-linecap="round"
          stroke-width="3.888"
          stroke="#666"
          fill="none"
          d="M27.1 18.4c3.7 0 7.7 1.7 10.1 8.7"
          style="stroke:rgb(102, 102, 102);"
        >
        </path>
        <path
          stroke-miterlimit="10"
          stroke-linecap="round"
          stroke-width="3.888"
          stroke="#666"
          fill="none"
          d="M27.1 42.7c3.7 0 7.7 1.7 10.1 8.7"
          style="stroke:rgb(102, 102, 102);"
        >
        </path>
        <path
          stroke-miterlimit="10"
          stroke-linecap="round"
          stroke-width="3.888"
          stroke="#666"
          fill="none"
          d="M27.1 67c3.7 0 7.7 1.7 10.1 8.7"
          style="stroke:rgb(102, 102, 102);"
        >
        </path>
        <path
          stroke-miterlimit="10"
          stroke-linecap="round"
          stroke-width="3.888"
          stroke="#666"
          fill="none"
          d="M72.9 18.4c-3.7 0-7.7 1.7-10.1 8.7"
          style="stroke:rgb(102, 102, 102);"
        >
        </path>
        <path
          stroke-miterlimit="10"
          stroke-linecap="round"
          stroke-width="3.888"
          stroke="#666"
          fill="none"
          d="M72.9 42.7c-3.7 0-7.7 1.7-10.1 8.7"
          style="stroke:rgb(102, 102, 102);"
        >
        </path>
        <path
          stroke-miterlimit="10"
          stroke-linecap="round"
          stroke-width="3.888"
          stroke="#666"
          fill="none"
          d="M72.9 67c-3.7 0-7.7 1.7-10.1 8.7"
          style="stroke:rgb(102, 102, 102);"
        >
        </path>
        <path
          fill="#333"
          d="M53.9 10.9v-.6c0-2.1-1.7-3.8-3.8-3.8-2.1 0-3.8 1.7-3.8 3.8v.6h-6.5c-3.1 0-5.6 2.5-5.6 5.6v71.4c0 3.1 2.5 5.6 5.6 5.6h20.5c3.1 0 5.6-2.5 5.6-5.6V16.5c0-3.1-2.5-5.6-5.6-5.6h-6.4z"
          style="fill:rgb(51, 51, 51);"
        >
        </path>
        <circle
          style="transition: all 0.5s ease-in-out"
          fill={@color == "red" && "#e15b64"}
          r="9.7"
          cy="27.9"
          cx="50.1"
        >
        </circle>
        <circle
          style="transition: all 0.5s ease-in-out"
          fill={@color == "orange" && "#f5e169"}
          r="9.7"
          cy="52.2"
          cx="50.1"
        >
        </circle>
        <circle
          style="transition: all 0.5s ease-in-out"
          fill={@color == "green" && "#abbd81"}
          r="9.7"
          cy="76.5"
          cx="50.1"
        >
        </circle>
      </g>
      <!-- generated by https://loading.io/ -->
    </svg>
    """
  end

  attr :color, :string, values: ["red", "orange", "green"], required: true

  def people(assigns) do
    ~H"""
    <svg
      xml:space="preserve"
      viewBox="0 0 100 100"
      y="0"
      x="0"
      xmlns="http://www.w3.org/2000/svg"
      id="tf_pedestrian_1"
      version="1.1"
      width="128px"
      height="128px"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      style="width:80%;height:80%"
      astyle="width:100%;height:100%;background-size:initial;background-repeat-y:initial;background-repeat-x:initial;background-position-y:initial;background-position-x:initial;background-origin:initial;background-image:initial;background-color:rgb(255, 255, 255);background-clip:initial;background-attachment:initial;"
    >
      <g class="ldl-scale" style="transform-origin:50% 50%;transform:rotate(0deg) scale(0.8, 0.8);">
        <path
          fill="#333"
          d="M53.3 95h-6.5c-1.5 0-2.8-1.2-2.8-2.8V77.8h12.1v14.4c0 1.6-1.3 2.8-2.8 2.8z"
          style="fill:rgb(51, 51, 51);"
        >
        </path>
        <path
          fill="#333"
          d="M65.9 81.6H34.1c-3 0-5.5-2.4-5.5-5.5V12.5c0-3 2.4-5.5 5.5-5.5h31.7c3 0 5.5 2.4 5.5 5.5v63.7c0 3-2.4 5.4-5.4 5.4z"
          style="fill:rgb(51, 51, 51);"
        >
        </path>
        <circle fill={(@color == "red" && "#e15b64") || "#000"} opacity="1" r="14.2" cy="28" cx="50">
        </circle>
        <path
          fill="#fff"
          opacity={(@color == "red" && "0.5") || "0.0"}
          d="M55.3 21.5c-.6 0-1 .4-1 1l-.2 3.6c0 .1-.1.2-.2.2s-.2-.1-.2-.2v-4.9c0-.5-.4-1-1-.9-.5 0-1 .4-.9 1v4.9c0 .1-.1.2-.2.2s-.2-.1-.2-.2l-.1-5.8c0-.5-.4-1-1-.9-.5 0-1 .4-.9 1l.1 5.8c0 .1-.1.2-.2.2h-.1c-.1 0-.2-.1-.2-.2l-.2-6.3c0-.5-.4-1-1-.9-.5 0-1 .4-.9 1l.2 5.4.1 3.6c0 .3-.4.4-.6.2l-1-2.2-.6-.7c-.4-.3-1.2-.4-1.8-.2l-.5.1c-.6.3-.3.8 0 1.3.9 1.5 1.7 3.1 2.3 4.7.6 1.4 1.4 3.1 2.8 3.9 1.6.9 3.9.8 5.5.1 2.7-1.1 2.9-5.1 2.9-7.6v-2.5l.2-3.8c-.2-.5-.6-.9-1.1-.9z"
          style="fill:rgb(255, 255, 255);"
        >
        </path>
        <circle
          fill={(@color == "green" && "#abbd81") || "#000"}
          opacity={@color != "green" && "1"}
          r="14.2"
          cy="60.6"
          cx="50"
        >
        </circle>
        <g opacity={(@color == "green" && "0.5") || "0.0"} style="">
          <circle
            r="2.1"
            fill="#fff"
            cy="53"
            cx="49"
            transform="rotate(-86.403 49.023 52.974) scale(.99997)"
            style="fill:rgb(255, 255, 255);"
          >
          </circle>
          <path
            fill="#fff"
            d="M56.4 68.6l-2.1-2.4c-.4-.4-.6-.9-.7-1.4l-.9-3.6-.6-3 1 1.1c.1.1.2.3.3.5l.2 1.4c.1.5.5.8 1 .7.5-.1.8-.5.7-1L55 59c0-.3-.2-.5-.3-.7l-1.1-1.2-2.1-2.2-.2-.2c-.1 0-.1 0-.2-.1h-.2l-2.2.5-.5.1c-.1 0-.2.1-.2.1l-.1.1L46 58l-1.1-1.5c-.3-.4-.8-.4-1.2-.1-.4.3-.4.8-.1 1.2l1.4 1.8.5.6.1.1c.3.2.8.2 1-.1l.5-.6 1.1-1.4.8 3.8-2.5 2.6-.3.3c-.4.4-.7.9-.8 1.4l-.9 3.2c-.2.5.2 1.1.7 1.3.5.2 1.1-.2 1.3-.7l.9-3.2c.1-.4.4-.8.7-1.2l2.9-3.1.8 3.5.1.4c.1.5.4 1 .7 1.4l2.2 2.5c.4.4 1 .5 1.5.1.4-.6.4-1.2.1-1.7z"
            style="fill:rgb(255, 255, 255);"
          >
          </path>
        </g>
      </g>
      <!-- generated by https://loading.io/ -->
    </svg>
    """
  end

  attr :car_color, :string, values: ["red", "orange", "green"], default: "red"
  attr :people_color, :string, values: ["red", "orange", "green"], default: "green"

  def card(assigns) do
    ~H"""
    <div class="flex items-end bg-blue-200 h-32">
      <.car color={@car_color} />
      <.people color={@people_color} />
    </div>
    """
  end

  attr :state, :string, required: true

  def car_playground(assigns) do
    ~H"""
    <div class="flex flex-col">
      <div class="flex bg-blue-200 items-end w-64 h-64">
        <.car color={@state} />
      </div>
      <div class="flex justify-center bg-blue-300 p-2 gap-x-4">
        <.button color="green" action="car_turn_green">turn_green</.button>

        <button
          phx-click="car_turn_red"
          class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
        >
          turn_red
        </button>
      </div>
    </div>
    """
  end

  attr :state, :string, required: true

  def people_playground(assigns) do
    ~H"""
    <div class="flex flex-col">
      <div class="flex items-center justify-center bg-blue-200 w-64 h-64">
        <.people color={@state} />
      </div>
      <div class="flex justify-center bg-blue-300 p-2 gap-x-4">
        <.button color="green" action="people_turn_green">turn_green</.button>
        <.button color="red" action="people_turn_red">turn_red</.button>
      </div>
    </div>
    """
  end

  attr :car_color, :string, values: ["red", "orange", "green"], required: true
  attr :people_color, :string, values: ["red", "orange", "green"], required: true

  def manager_playground(assigns) do
    ~H"""
    <div class="flex flex-col">
      <div class="flex bg-blue-200 items-end w-64 h-64">
        <.car color={@car_color} />
        <.people color={@people_color} />
      </div>
      <div class="flex justify-center bg-blue-300 p-2 gap-x-4">
        <.button color="green" action="manager_cross">cross</.button>
      </div>
    </div>
    """
  end

  attr :color, :string, values: ["green", "red"], required: true
  attr :action, :string, required: true
  slot :inner_block

  def button(%{color: "green"} = assigns) do
    ~H"""
    <button
      phx-click={@action}
      class="bg-green-500 hover:bg-green-700 text-white font-bold py-2 px-4 rounded"
    >
      <%= render_slot(@inner_block) %>
    </button>
    """
  end

  def button(%{color: "red"} = assigns) do
    ~H"""
    <button
      phx-click={@action}
      class="bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded"
    >
      <%= render_slot(@inner_block) %>
    </button>
    """
  end
end
